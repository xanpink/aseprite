name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        build_type: [Release]
        ui: [gui, cli]
        scripting: [lua, noscripts]
        exclude:
          - os: windows-latest
            build_type: Debug
            ui: gui
          - os: macos-latest
            build_type: RelWithDebInfo
            ui: cli
          - os: ubuntu-latest
            build_type: RelWithDebInfo
            scripting: noscripts

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install Dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
          libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev \
          unzip

    - name: Install Skia
      if: ${{ matrix.ui == 'gui' }}
      shell: bash
      run: |
        # 确保路径正确
        skia_dir="$GITHUB_WORKSPACE/skia"
        mkdir -p "$skia_dir"
        
        # 获取Skia URL
        . ./laf/misc/skia-url.sh
        skia_file=$(basename "$SKIA_URL")
        
        # 下载并解压Skia
        curl --ssl-revoke-best-effort -L -o "$skia_file" "$SKIA_URL"
        unzip -q "$skia_file" -d "$skia_dir"
        
        # 修复ICU数据文件
        mkdir -p "$skia_dir/third_party/externals/icu/flutter"
        curl -L https://raw.githubusercontent.com/unicode-org/icu/icu4c/source/data/in/icudtl.dat \
          -o "$skia_dir/third_party/externals/icu/flutter/icudtl.dat"

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.17
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      with:
        key: ${{ matrix.os }}-${{ matrix.ui }}-${{ matrix.scripting }}-${{ matrix.build_type }}

    - uses: aseprite/get-ninja@main

    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'

    - name: Generating Makefiles
      shell: bash
      run: |
        # 设置环境变量
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          export enable_ccache=off
          export realpath="cygpath -w"
        else
          export enable_ccache=on
          export realpath="realpath"
        fi

        if [[ "${{ matrix.ui }}" == "gui" ]]; then
          export laf_backend=skia
          skia_path=$($realpath "$GITHUB_WORKSPACE/skia")
          skia_library_path="$skia_path/out/Release"
        else
          export laf_backend=none
          skia_path=""
          skia_library_path=""
        fi

        if [[ "${{ matrix.scripting }}" == "lua" ]]; then
          export enable_scripting=on
        else
          export enable_scripting=off
        fi

        # 配置CMake
        cmake_args=(
          -S . -B build -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DENABLE_TESTS=ON
          -DENABLE_SCRIPTING=$enable_scripting
          -DENABLE_CCACHE=$enable_ccache
          -DLAF_BACKEND=$laf_backend
        )

        if [[ "${{ matrix.ui }}" == "gui" ]]; then
          cmake_args+=(
            -DSKIA_DIR="$skia_path"
            -DSKIA_LIBRARY_DIR="$skia_library_path"
          )
        fi

        if [[ "${{ runner.os }}" == "macOS" ]]; then
          cmake_args+=(-DCMAKE_OSX_DEPLOYMENT_TARGET=10.9)
        fi

        # 执行CMake
        cmake "${cmake_args[@]}"

    - name: Compiling
      shell: bash
      run: |
        cd build && ninja

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-${{ runner.os }}-${{ matrix.ui }}-${{ matrix.scripting }}-${{ matrix.build_type }}
        path: |
          ${{ github.workspace }}/build/bin/data
          ${{ github.workspace }}/build/bin/aseprite*
